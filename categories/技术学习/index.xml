<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术学习 on yzBlog</title><link>https://yz627.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</link><description>Recent content in 技术学习 on yzBlog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 18 Oct 2025 21:45:13 +0800</lastBuildDate><atom:link href="https://yz627.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>Go反射机制详解</title><link>https://yz627.github.io/posts/go/reflect/</link><pubDate>Sat, 18 Oct 2025 21:45:13 +0800</pubDate><guid>https://yz627.github.io/posts/go/reflect/</guid><description>&lt;h2 id="reflecttype"&gt;&lt;code&gt;reflect.Type&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代表变量的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold"&gt;func&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ptr := new(&lt;span style=""&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ty := reflect.TypeOf(ptr) &lt;span style="font-style:italic"&gt;// 返回reflect.Type类型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fmt.Println(ty.Kind()) &lt;span style="font-style:italic"&gt;// 查看类型，这里为ptr,代表指针类型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fmt.Println(ty.Elem()) &lt;span style="font-style:italic"&gt;// 这里获取指针指向的值的类型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="reflectvalue"&gt;&lt;code&gt;reflect.Value&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;代表变量的值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold"&gt;func&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ptr := 20
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ty := reflect.ValueOf(ptr) &lt;span style="font-style:italic"&gt;// 返回reflect.Value类型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fmt.Println(ty.Kind()) &lt;span style="font-style:italic"&gt;// 获取类型，这里为int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fmt.Println(ty.Int()) &lt;span style="font-style:italic"&gt;// 获取ty的值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="调用对象的方法"&gt;调用对象的方法&lt;/h2&gt;
&lt;p&gt;基础认识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NumMethod()&lt;/code&gt;返回类型拥有的方法数量&lt;/p&gt;
&lt;!--只能返回导出方法的数量，未导出方法不能获得--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type&lt;/code&gt;和 &lt;code&gt;Value&lt;/code&gt;类型都有对应的该方法，但是使用方式不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Method(i)&lt;/code&gt;返回类型得第 &lt;code&gt;i&lt;/code&gt;个方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type.Method(i)&lt;/code&gt;返回类型为 &lt;code&gt;reflect.Method&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;这个 &lt;code&gt;reflect.Method&lt;/code&gt; 结构体包含了方法的名字和类型信息（包括接收者类型和方法的参数、结果类型等）。这个方法主要用于静态地获取类型的方法签名信息，不涉及具体的实例或值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Value.Method(i)&lt;/code&gt;返回类型为 &lt;code&gt;Value&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;这个新 &lt;code&gt;reflect.Value&lt;/code&gt; 表示的是原始值上指定方法的绑定实例。这意味着它不仅包含了方法的信息，还绑定了具体实例的值，因此可以被调用以执行该方法。这种设计允许在反射过程中动态地调用方法并处理实例的具体行为，而不只是查看方法的签名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold"&gt;type&lt;/span&gt; Tree &lt;span style="font-weight:bold"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; value &lt;span style=""&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold"&gt;func&lt;/span&gt; (t *Tree) Get() &lt;span style=""&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold"&gt;return&lt;/span&gt; t.value
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold"&gt;func&lt;/span&gt; (t *Tree) Add(num &lt;span style=""&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t.value += num
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold"&gt;func&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tree := &amp;amp;Tree{1}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; treeType := reflect.TypeOf(tree)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold"&gt;for&lt;/span&gt; i := 0; i &amp;lt; treeType.NumMethod(); i++ {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; method := treeType.Method(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fmt.Println(method.Name)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fmt.Println(method.Type.Kind())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用得基本流程&lt;/p&gt;</description></item><item><title>博客标题</title><link>https://yz627.github.io/posts/daily/test/</link><pubDate>Sat, 18 Oct 2025 14:55:19 +0800</pubDate><guid>https://yz627.github.io/posts/daily/test/</guid><description>&lt;p&gt;这是摘要&lt;/p&gt;</description></item></channel></rss>